// NAMC NorCal Member Portal Database Schema
// Supports both SQLite (development) and PostgreSQL (production)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core User Model
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  firstName    String
  lastName     String
  company      String?
  title        String?
  phone        String?
  memberType   String   @default("REGULAR") // REGULAR or admin
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)
  
  // Basic JSON fields for SQLite
  skills       String   @default("[]") // JSON string
  languages    String   @default("[\"English\"]") // JSON string
  
  // Authentication fields
  failedLoginAttempts      Int       @default(0)
  lockedUntil              DateTime?
  lastFailedLogin          DateTime?
  lastSuccessfulLogin      DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
  
  // Relations
  userRoles    UserRole[]

  @@map("users")
}

// Basic Role System
model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  
  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Basic Project Model for testing
model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  budgetMin   Float?
  budgetMax   Float?
  location    String?
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?

  @@map("projects")
}

// Basic Event Model for testing
model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  startDate   DateTime
  endDate     DateTime?
  location    String?
  maxCapacity Int?
  price       Float?
  memberPrice Float?
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?

  @@map("events")
}