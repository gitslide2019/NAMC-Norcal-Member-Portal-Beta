# Production Docker Compose configuration for NAMC NorCal Member Portal
# Multi-environment setup with proper networking, security, and monitoring

version: '3.8'

services:
  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        BUILD_TIME: ${BUILD_TIME:-$(date +%s)}
        GIT_SHA: ${GIT_SHA:-unknown}
    container_name: namc-portal-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - HUBSPOT_API_KEY=${HUBSPOT_API_KEY}
      - HUBSPOT_CLIENT_ID=${HUBSPOT_CLIENT_ID}
      - HUBSPOT_CLIENT_SECRET=${HUBSPOT_CLIENT_SECRET}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://portal.namcnorcal.org}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FILE_UPLOAD_PATH=/app/uploads
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - namc_network
    healthcheck:
      test: ["CMD", "./healthcheck.sh", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.namc-portal.rule=Host(`portal.namcnorcal.org`)"
      - "traefik.http.routers.namc-portal.tls=true"
      - "traefik.http.routers.namc-portal.tls.certresolver=letsencrypt"
      - "traefik.http.services.namc-portal.loadbalancer.server.port=3000"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: namc-portal-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-namc_portal}
      - POSTGRES_USER=${POSTGRES_USER:-namc_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - namc_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-namc_user} -d ${POSTGRES_DB:-namc_portal}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    command: [
      "postgres",
      "-c", "shared_preload_libraries=pg_stat_statements",
      "-c", "pg_stat_statements.track=all",
      "-c", "max_connections=200",
      "-c", "shared_buffers=256MB",
      "-c", "effective_cache_size=1GB",
      "-c", "maintenance_work_mem=64MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=16MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=4MB",
      "-c", "min_wal_size=1GB",
      "-c", "max_wal_size=4GB",
      "-c", "log_statement=all",
      "-c", "log_duration=on",
      "-c", "log_min_duration_statement=1000"
    ]

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: namc-portal-redis
    restart: unless-stopped
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--timeout", "300",
      "--tcp-keepalive", "60"
    ]
    volumes:
      - redis_data:/data
    networks:
      - namc_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: namc-portal-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard (secure this in production)
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=false
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL:-admin@namcnorcal.org}
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/letsencrypt/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - namc_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.namcnorcal.org`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_AUTH:-admin:$$2y$$10$$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi}"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: namc-portal-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - namc_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.namcnorcal.org`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: namc-portal-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - namc_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.namcnorcal.org`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

  # Log aggregation - Loki
  loki:
    image: grafana/loki:latest
    container_name: namc-portal-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - namc_network

  # Log shipping - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: namc-portal-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - namc_network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: namc-portal-backup
    restart: "no"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-namc_portal}
      - POSTGRES_USER=${POSTGRES_USER:-namc_user}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - backup_data:/backup
      - ./scripts/backup/backup.sh:/backup.sh:ro
    networks:
      - namc_network
    depends_on:
      - postgres
    profiles:
      - backup
    command: ["/backup.sh"]

# Networks
networks:
  namc_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/redis

  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/uploads

  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/logs

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/grafana

  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/loki

  traefik_letsencrypt:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/traefik

  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-/var/lib/namc-portal}/backup