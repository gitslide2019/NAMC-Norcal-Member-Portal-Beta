'use client'

import * as React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Progress } from '@/components/ui/progress'
import { DynamicIcon } from '@/components/ui/dynamic-icon'
import { BusinessMetricCard } from '@/components/ui/business-metric-card'\nimport { cn } from '@/lib/utils'

export interface Certification {\n  id: string\n  name: string\n  type: 'DBE' | 'SBE' | 'WBE' | 'DVBE' | 'HUBZONE' | 'WOSB' | 'SDVOSB' | 'OTHER'\n  status: 'active' | 'expiring' | 'expired' | 'pending' | 'suspended'\n  issueDate: Date\n  expiryDate: Date\n  issuingAgency: string\n  certificateNumber: string\n  documentUrl?: string\n  lastVerified?: Date\n  notes?: string\n}\n\nexport interface ComplianceRequirement {\n  id: string\n  name: string\n  description: string\n  category: 'certification' | 'document' | 'training' | 'audit' | 'reporting'\n  priority: 'critical' | 'high' | 'medium' | 'low'\n  status: 'compliant' | 'non-compliant' | 'pending' | 'overdue'\n  dueDate?: Date\n  completedDate?: Date\n  assignedTo?: string\n  documents: string[]\n  lastUpdated: Date\n}\n\nexport interface AuditTrail {\n  id: string\n  action: string\n  entity: string\n  entityId: string\n  userId: string\n  userName: string\n  timestamp: Date\n  details: Record<string, any>\n  ipAddress?: string\n}\n\nexport interface ComplianceTrackerProps {\n  certifications: Certification[]\n  requirements: ComplianceRequirement[]\n  auditTrail: AuditTrail[]\n  onUpdateCertification: (id: string, updates: Partial<Certification>) => void\n  onUpdateRequirement: (id: string, updates: Partial<ComplianceRequirement>) => void\n  onDownloadAuditReport: (startDate: Date, endDate: Date) => void\n  className?: string\n}\n\nconst CERTIFICATION_COLORS = {\n  DBE: 'bg-blue-100 text-blue-800',\n  SBE: 'bg-green-100 text-green-800',\n  WBE: 'bg-purple-100 text-purple-800',\n  DVBE: 'bg-red-100 text-red-800',\n  HUBZONE: 'bg-orange-100 text-orange-800',\n  WOSB: 'bg-pink-100 text-pink-800',\n  SDVOSB: 'bg-indigo-100 text-indigo-800',\n  OTHER: 'bg-gray-100 text-gray-800',\n}\n\nconst STATUS_COLORS = {\n  active: 'bg-green-100 text-green-800',\n  expiring: 'bg-yellow-100 text-yellow-800',\n  expired: 'bg-red-100 text-red-800',\n  pending: 'bg-blue-100 text-blue-800',\n  suspended: 'bg-gray-100 text-gray-800',\n}\n\nconst PRIORITY_COLORS = {\n  critical: 'bg-red-100 text-red-800 border-red-300',\n  high: 'bg-orange-100 text-orange-800 border-orange-300',\n  medium: 'bg-yellow-100 text-yellow-800 border-yellow-300',\n  low: 'bg-green-100 text-green-800 border-green-300',\n}\n\nconst CertificationCard = ({ \n  certification, \n  onUpdate \n}: { \n  certification: Certification\n  onUpdate: (updates: Partial<Certification>) => void\n}) => {\n  const daysUntilExpiry = Math.ceil((certification.expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))\n  const isExpiring = daysUntilExpiry <= 30 && daysUntilExpiry > 0\n  const isExpired = daysUntilExpiry <= 0\n\n  return (\n    <Card className={cn(\n      \"transition-all duration-200 hover:shadow-md\",\n      isExpired && \"ring-2 ring-red-200\",\n      isExpiring && \"ring-2 ring-yellow-200\"\n    )}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1\">\n            <CardTitle className=\"text-lg\">{certification.name}</CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Badge className={CERTIFICATION_COLORS[certification.type]}>\n                {certification.type}\n              </Badge>\n              <Badge variant=\"outline\" className={STATUS_COLORS[certification.status]}>\n                {certification.status.charAt(0).toUpperCase() + certification.status.slice(1)}\n              </Badge>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-namc-gray-600\">Expires</p>\n            <p className={cn(\n              \"text-sm font-medium\",\n              isExpired && \"text-red-600\",\n              isExpiring && \"text-yellow-600\",\n              !isExpired && !isExpiring && \"text-green-600\"\n            )}>\n              {certification.expiryDate.toLocaleDateString()}\n            </p>\n            <p className=\"text-xs text-namc-gray-500\">\n              {isExpired ? `${Math.abs(daysUntilExpiry)} days overdue` : \n               isExpiring ? `${daysUntilExpiry} days left` : \n               `${daysUntilExpiry} days left`}\n            </p>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <p className=\"text-namc-gray-600\">Certificate #</p>\n            <p className=\"font-medium\">{certification.certificateNumber}</p>\n          </div>\n          <div>\n            <p className=\"text-namc-gray-600\">Issuing Agency</p>\n            <p className=\"font-medium\">{certification.issuingAgency}</p>\n          </div>\n        </div>\n        \n        {certification.notes && (\n          <div className=\"pt-2 border-t\">\n            <p className=\"text-xs text-namc-gray-600 mb-1\">Notes</p>\n            <p className=\"text-sm\">{certification.notes}</p>\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between pt-2\">\n          <div className=\"flex items-center gap-2\">\n            {certification.documentUrl && (\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <a href={certification.documentUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <DynamicIcon name=\"FileText\" size={16} className=\"mr-1\" />\n                  View Certificate\n                </a>\n              </Button>\n            )}\n          </div>\n          \n          <div className=\"flex items-center gap-1\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => {}}>\n              <DynamicIcon name=\"Edit\" size={16} />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => {}}>\n              <DynamicIcon name=\"RefreshCw\" size={16} />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nconst RequirementCard = ({ \n  requirement, \n  onUpdate \n}: { \n  requirement: ComplianceRequirement\n  onUpdate: (updates: Partial<ComplianceRequirement>) => void\n}) => {\n  const isOverdue = requirement.dueDate && requirement.dueDate < new Date() && requirement.status !== 'compliant'\n  const daysUntilDue = requirement.dueDate ? \n    Math.ceil((requirement.dueDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)) : null\n\n  return (\n    <Card className={cn(\n      \"transition-all duration-200 hover:shadow-md border-l-4\",\n      PRIORITY_COLORS[requirement.priority],\n      isOverdue && \"ring-2 ring-red-200\"\n    )}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1 flex-1\">\n            <CardTitle className=\"text-base\">{requirement.name}</CardTitle>\n            <p className=\"text-sm text-namc-gray-600\">{requirement.description}</p>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className={cn(\n                \"text-xs\",\n                requirement.status === 'compliant' && \"bg-green-100 text-green-800\",\n                requirement.status === 'non-compliant' && \"bg-red-100 text-red-800\",\n                requirement.status === 'pending' && \"bg-yellow-100 text-yellow-800\",\n                requirement.status === 'overdue' && \"bg-red-100 text-red-800\"\n              )}>\n                {requirement.status.replace('-', ' ').toUpperCase()}\n              </Badge>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {requirement.priority.toUpperCase()}\n              </Badge>\n            </div>\n          </div>\n          \n          {requirement.dueDate && (\n            <div className=\"text-right ml-4\">\n              <p className=\"text-sm text-namc-gray-600\">Due Date</p>\n              <p className={cn(\n                \"text-sm font-medium\",\n                isOverdue && \"text-red-600\",\n                daysUntilDue && daysUntilDue <= 7 && !isOverdue && \"text-yellow-600\"\n              )}>\n                {requirement.dueDate.toLocaleDateString()}\n              </p>\n              {daysUntilDue !== null && (\n                <p className=\"text-xs text-namc-gray-500\">\n                  {isOverdue ? `${Math.abs(daysUntilDue)} days overdue` : \n                   `${daysUntilDue} days left`}\n                </p>\n              )}\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3\">\n        {requirement.documents.length > 0 && (\n          <div>\n            <p className=\"text-sm font-medium text-namc-gray-700 mb-2\">Required Documents</p>\n            <div className=\"flex flex-wrap gap-2\">\n              {requirement.documents.map((doc, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                  <DynamicIcon name=\"FileText\" size={12} className=\"mr-1\" />\n                  {doc}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between pt-2\">\n          <div className=\"text-xs text-namc-gray-500\">\n            Last updated: {requirement.lastUpdated.toLocaleDateString()}\n          </div>\n          \n          <div className=\"flex items-center gap-1\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => {}}>\n              <DynamicIcon name=\"CheckCircle\" size={16} />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => {}}>\n              <DynamicIcon name=\"Edit\" size={16} />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport function ComplianceTracker({\n  certifications,\n  requirements,\n  auditTrail,\n  onUpdateCertification,\n  onUpdateRequirement,\n  onDownloadAuditReport,\n  className,\n}: ComplianceTrackerProps) {\n  const [activeTab, setActiveTab] = React.useState<'overview' | 'certifications' | 'requirements' | 'audit'>('overview')\n  \n  // Calculate compliance metrics\n  const activeCertifications = certifications.filter(cert => cert.status === 'active')\n  const expiringCertifications = certifications.filter(cert => {\n    const daysUntilExpiry = Math.ceil((cert.expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))\n    return daysUntilExpiry <= 30 && daysUntilExpiry > 0\n  })\n  const expiredCertifications = certifications.filter(cert => cert.expiryDate < new Date())\n  \n  const compliantRequirements = requirements.filter(req => req.status === 'compliant')\n  const overdueRequirements = requirements.filter(req => {\n    return req.dueDate && req.dueDate < new Date() && req.status !== 'compliant'\n  })\n  \n  const complianceScore = requirements.length > 0 ? \n    Math.round((compliantRequirements.length / requirements.length) * 100) : 100\n  \n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Navigation Tabs */}\n      <div className=\"border-b border-namc-gray-200\">\n        <nav className=\"flex space-x-8\">\n          {[\n            { id: 'overview', label: 'Overview', icon: 'BarChart3' },\n            { id: 'certifications', label: 'Certifications', icon: 'Award' },\n            { id: 'requirements', label: 'Requirements', icon: 'CheckSquare' },\n            { id: 'audit', label: 'Audit Trail', icon: 'FileText' },\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={cn(\n                \"flex items-center gap-2 py-2 px-1 border-b-2 font-medium text-sm transition-colors\",\n                activeTab === tab.id\n                  ? \"border-namc-blue-500 text-namc-blue-600\"\n                  : \"border-transparent text-namc-gray-500 hover:text-namc-gray-700 hover:border-namc-gray-300\"\n              )}\n            >\n              <DynamicIcon name={tab.icon} size={16} />\n              {tab.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n      \n      {/* Overview Tab */}\n      {activeTab === 'overview' && (\n        <div className=\"space-y-6\">\n          {/* Compliance Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <BusinessMetricCard\n              title=\"Active Certifications\"\n              value={activeCertifications.length}\n              icon=\"Award\"\n              iconColor=\"text-green-600\"\n              iconBackground=\"bg-green-100\"\n              trend={expiringCertifications.length > 0 ? 'down' : 'up'}\n              trendValue={expiringCertifications.length > 0 ? `${expiringCertifications.length} expiring` : 'All current'}\n              format=\"number\"\n              variant=\"elevated\"\n            />\n            \n            <BusinessMetricCard\n              title=\"Compliance Score\"\n              value={complianceScore}\n              suffix=\"%\"\n              icon=\"CheckCircle\"\n              iconColor={complianceScore >= 90 ? \"text-green-600\" : complianceScore >= 70 ? \"text-yellow-600\" : \"text-red-600\"}\n              iconBackground={complianceScore >= 90 ? \"bg-green-100\" : complianceScore >= 70 ? \"bg-yellow-100\" : \"bg-red-100\"}\n              trend={complianceScore >= 90 ? 'up' : complianceScore >= 70 ? 'neutral' : 'down'}\n              trendValue={`${compliantRequirements.length}/${requirements.length} compliant`}\n              showProgress\n              progressValue={complianceScore}\n              variant=\"elevated\"\n            />\n            \n            <BusinessMetricCard\n              title=\"Overdue Items\"\n              value={overdueRequirements.length}\n              icon=\"AlertTriangle\"\n              iconColor=\"text-red-600\"\n              iconBackground=\"bg-red-100\"\n              trend={overdueRequirements.length > 0 ? 'up' : 'neutral'}\n              trendValue={overdueRequirements.length > 0 ? 'Action needed' : 'All current'}\n              format=\"number\"\n              variant={overdueRequirements.length > 0 ? 'interactive' : 'elevated'}\n            />\n            \n            <BusinessMetricCard\n              title=\"Audit Events\"\n              value={auditTrail.length}\n              icon=\"FileSearch\"\n              iconColor=\"text-blue-600\"\n              iconBackground=\"bg-blue-100\"\n              trend=\"neutral\"\n              trendValue=\"Last 30 days\"\n              format=\"number\"\n              variant=\"elevated\"\n            />\n          </div>\n          \n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Button variant=\"outline\" className=\"h-20 flex-col\" onClick={() => {}}>\n                  <DynamicIcon name=\"Upload\" className=\"w-6 h-6 mb-2\" size={24} />\n                  Upload Certificate\n                </Button>\n                <Button variant=\"outline\" className=\"h-20 flex-col\" onClick={() => {}}>\n                  <DynamicIcon name=\"Calendar\" className=\"w-6 h-6 mb-2\" size={24} />\n                  Schedule Renewal\n                </Button>\n                <Button variant=\"outline\" className=\"h-20 flex-col\" onClick={() => onDownloadAuditReport(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), new Date())}>\n                  <DynamicIcon name=\"Download\" className=\"w-6 h-6 mb-2\" size={24} />\n                  Download Audit Report\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n          \n          {/* Expiring Certifications Alert */}\n          {expiringCertifications.length > 0 && (\n            <Card className=\"border-yellow-200 bg-yellow-50\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-yellow-800\">\n                  <DynamicIcon name=\"AlertTriangle\" size={20} />\n                  Expiring Certifications\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {expiringCertifications.map(cert => {\n                    const daysLeft = Math.ceil((cert.expiryDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))\n                    return (\n                      <div key={cert.id} className=\"flex items-center justify-between p-3 bg-white rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">{cert.name}</p>\n                          <p className=\"text-sm text-namc-gray-600\">Expires in {daysLeft} days</p>\n                        </div>\n                        <Button size=\"sm\" variant=\"outline\">\n                          Renew Now\n                        </Button>\n                      </div>\n                    )\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n      \n      {/* Certifications Tab */}\n      {activeTab === 'certifications' && (\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Certifications</h3>\n            <Button onClick={() => {}}>\n              <DynamicIcon name=\"Plus\" className=\"w-4 h-4 mr-2\" size={16} />\n              Add Certification\n            </Button>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {certifications.map(cert => (\n              <CertificationCard\n                key={cert.id}\n                certification={cert}\n                onUpdate={(updates) => onUpdateCertification(cert.id, updates)}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* Requirements Tab */}\n      {activeTab === 'requirements' && (\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Compliance Requirements</h3>\n            <Button onClick={() => {}}>\n              <DynamicIcon name=\"Plus\" className=\"w-4 h-4 mr-2\" size={16} />\n              Add Requirement\n            </Button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {requirements.map(req => (\n              <RequirementCard\n                key={req.id}\n                requirement={req}\n                onUpdate={(updates) => onUpdateRequirement(req.id, updates)}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      \n      {/* Audit Trail Tab */}\n      {activeTab === 'audit' && (\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Audit Trail</h3>\n            <Button onClick={() => onDownloadAuditReport(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), new Date())}>\n              <DynamicIcon name=\"Download\" className=\"w-4 h-4 mr-2\" size={16} />\n              Export Report\n            </Button>\n          </div>\n          \n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"space-y-0\">\n                {auditTrail.slice(0, 20).map((entry, index) => (\n                  <div key={entry.id} className={cn(\n                    \"flex items-center gap-4 p-4\",\n                    index !== auditTrail.length - 1 && \"border-b border-namc-gray-100\"\n                  )}>\n                    <div className=\"w-2 h-2 bg-namc-blue-500 rounded-full flex-shrink-0\" />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2\">\n                        <p className=\"text-sm font-medium text-namc-gray-900\">{entry.action}</p>\n                        <Badge variant=\"outline\" className=\"text-xs\">{entry.entity}</Badge>\n                      </div>\n                      <p className=\"text-sm text-namc-gray-600 mt-1\">\n                        by {entry.userName} • {entry.timestamp.toLocaleString()}\n                      </p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <DynamicIcon name=\"Eye\" size={16} />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  )\n}"}